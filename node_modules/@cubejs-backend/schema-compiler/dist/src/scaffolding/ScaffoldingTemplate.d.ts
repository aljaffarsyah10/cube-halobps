import { MemberReference } from './descriptors/MemberReference';
import { ValueWithComments } from './descriptors/ValueWithComments';
import { CubeDescriptor, CubeDescriptorMember, DatabaseSchema, TableName } from './ScaffoldingSchema';
export type SchemaContext = {
    dataSource?: string;
};
export type CubeMembers = {
    measures: CubeDescriptorMember[];
    dimensions: CubeDescriptorMember[];
};
export type SchemaDescriptor = SchemaDescriptor[] | string | number | MemberReference | ValueWithComments | object;
export declare enum SchemaFormat {
    JavaScript = "js",
    Yaml = "yaml"
}
export type ScaffoldingTemplateOptions = {
    format?: SchemaFormat;
    snakeCase?: boolean;
    catalog?: string | null;
};
export declare class ScaffoldingTemplate {
    private readonly driver;
    protected readonly options: ScaffoldingTemplateOptions;
    private formatStrategy;
    constructor(dbSchema: DatabaseSchema, driver: any, options?: ScaffoldingTemplateOptions);
    generateFilesByTableNames(tableNames: TableName[], schemaContext?: SchemaContext): import("./formatters").SchemaFile[];
    generateFilesByCubeDescriptors(cubeDescriptors: CubeDescriptor[], schemaContext?: SchemaContext): import("./formatters").SchemaFile[];
}
//# sourceMappingURL=ScaffoldingTemplate.d.ts.map