"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaScriptSchemaFormatter = void 0;
const MemberReference_1 = require("../descriptors/MemberReference");
const ValueWithComments_1 = require("../descriptors/ValueWithComments");
const BaseSchemaFormatter_1 = require("./BaseSchemaFormatter");
class JavaScriptSchemaFormatter extends BaseSchemaFormatter_1.BaseSchemaFormatter {
    fileExtension() {
        return 'js';
    }
    cubeReference(cube) {
        return `\${${cube}}`;
    }
    renderFile(fileDescriptor) {
        const { cube, ...descriptor } = fileDescriptor;
        return `cube(\`${cube}\`, ${this.render(descriptor, 0)});\n`;
    }
    render(descriptor, level, appendComment = '') {
        const lineSeparator = `,\n${level < 2 ? '\n' : ''}`;
        if (Array.isArray(descriptor)) {
            const items = descriptor.map(desc => this.render(desc, level + 1)).join(', ');
            return `[${items}]`;
        }
        else if (typeof descriptor === 'string') {
            return `\`${descriptor.replace(/`/g, '\\`')}\``;
        }
        else if (descriptor instanceof MemberReference_1.MemberReference) {
            return descriptor.member;
        }
        else if (descriptor instanceof ValueWithComments_1.ValueWithComments) {
            return this.render(descriptor.value, level, descriptor.comments.map((comment) => `  // ${comment}`).join('\n'));
        }
        else if (typeof descriptor === 'object') {
            const content = descriptor != null ? Object.keys(descriptor)
                .filter(k => descriptor[k] != null)
                .map(key => `${key}: ${this.render(descriptor[key], level + 1)}`)
                .join(lineSeparator)
                .split('\n')
                .map(l => `  ${l}`)
                .join('\n') : '';
            return `{\n${appendComment}${content}\n}`;
        }
        return descriptor.toString();
    }
}
exports.JavaScriptSchemaFormatter = JavaScriptSchemaFormatter;
//# sourceMappingURL=JavaScriptSchemaFormatter.js.map