import { Token } from 'antlr4ts/Token';
import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class Python3Lexer extends Lexer {
    static readonly INDENT = 1;
    static readonly DEDENT = 2;
    static readonly SINGLE_QUOTE_SHORT_TEMPLATE_STRING_START = 3;
    static readonly DOUBLE_QUOTE_SHORT_TEMPLATE_STRING_START = 4;
    static readonly SINGLE_QUOTE_LONG_TEMPLATE_STRING_START = 5;
    static readonly DOUBLE_QUOTE_LONG_TEMPLATE_STRING_START = 6;
    static readonly STRING = 7;
    static readonly NUMBER = 8;
    static readonly INTEGER = 9;
    static readonly DEF = 10;
    static readonly RETURN = 11;
    static readonly RAISE = 12;
    static readonly FROM = 13;
    static readonly IMPORT = 14;
    static readonly AS = 15;
    static readonly GLOBAL = 16;
    static readonly NONLOCAL = 17;
    static readonly ASSERT = 18;
    static readonly IF = 19;
    static readonly ELIF = 20;
    static readonly ELSE = 21;
    static readonly WHILE = 22;
    static readonly FOR = 23;
    static readonly IN = 24;
    static readonly TRY = 25;
    static readonly FINALLY = 26;
    static readonly WITH = 27;
    static readonly EXCEPT = 28;
    static readonly LAMBDA = 29;
    static readonly OR = 30;
    static readonly AND = 31;
    static readonly NOT = 32;
    static readonly IS = 33;
    static readonly NONE = 34;
    static readonly TRUE = 35;
    static readonly FALSE = 36;
    static readonly CLASS = 37;
    static readonly YIELD = 38;
    static readonly DEL = 39;
    static readonly PASS = 40;
    static readonly CONTINUE = 41;
    static readonly BREAK = 42;
    static readonly ASYNC = 43;
    static readonly AWAIT = 44;
    static readonly NEWLINE = 45;
    static readonly NAME = 46;
    static readonly STRING_LITERAL = 47;
    static readonly BYTES_LITERAL = 48;
    static readonly DECIMAL_INTEGER = 49;
    static readonly OCT_INTEGER = 50;
    static readonly HEX_INTEGER = 51;
    static readonly BIN_INTEGER = 52;
    static readonly FLOAT_NUMBER = 53;
    static readonly IMAG_NUMBER = 54;
    static readonly DOT = 55;
    static readonly ELLIPSIS = 56;
    static readonly STAR = 57;
    static readonly OPEN_PAREN = 58;
    static readonly CLOSE_PAREN = 59;
    static readonly COMMA = 60;
    static readonly COLON = 61;
    static readonly SEMI_COLON = 62;
    static readonly POWER = 63;
    static readonly ASSIGN = 64;
    static readonly OPEN_BRACK = 65;
    static readonly CLOSE_BRACK = 66;
    static readonly OR_OP = 67;
    static readonly XOR = 68;
    static readonly AND_OP = 69;
    static readonly LEFT_SHIFT = 70;
    static readonly RIGHT_SHIFT = 71;
    static readonly ADD = 72;
    static readonly MINUS = 73;
    static readonly DIV = 74;
    static readonly MOD = 75;
    static readonly IDIV = 76;
    static readonly NOT_OP = 77;
    static readonly OPEN_BRACE = 78;
    static readonly TEMPLATE_CLOSE_BRACE = 79;
    static readonly CLOSE_BRACE = 80;
    static readonly LESS_THAN = 81;
    static readonly GREATER_THAN = 82;
    static readonly EQUALS = 83;
    static readonly GT_EQ = 84;
    static readonly LT_EQ = 85;
    static readonly NOT_EQ_1 = 86;
    static readonly NOT_EQ_2 = 87;
    static readonly AT = 88;
    static readonly ARROW = 89;
    static readonly ADD_ASSIGN = 90;
    static readonly SUB_ASSIGN = 91;
    static readonly MULT_ASSIGN = 92;
    static readonly AT_ASSIGN = 93;
    static readonly DIV_ASSIGN = 94;
    static readonly MOD_ASSIGN = 95;
    static readonly AND_ASSIGN = 96;
    static readonly OR_ASSIGN = 97;
    static readonly XOR_ASSIGN = 98;
    static readonly LEFT_SHIFT_ASSIGN = 99;
    static readonly RIGHT_SHIFT_ASSIGN = 100;
    static readonly POWER_ASSIGN = 101;
    static readonly IDIV_ASSIGN = 102;
    static readonly QUOTE = 103;
    static readonly DOUBLE_QUOTE = 104;
    static readonly SKIP_ = 105;
    static readonly UNKNOWN_CHAR = 106;
    static readonly SINGLE_QUOTE_SHORT_TEMPLATE_STRING_END = 107;
    static readonly SINGLE_QUOTE_LONG_TEMPLATE_STRING_END = 108;
    static readonly SINGLE_QUOTE_STRING_ATOM = 109;
    static readonly DOUBLE_QUOTE_SHORT_TEMPLATE_STRING_END = 110;
    static readonly DOUBLE_QUOTE_LONG_TEMPLATE_STRING_END = 111;
    static readonly DOUBLE_QUOTE_STRING_ATOM = 112;
    static readonly SINGLE_TEMPLATE = 1;
    static readonly DOUBLE_TEMPLATE = 2;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    private token_queue;
    private indents;
    private opened;
    private templateDepth;
    private last_token;
    reset(): void;
    emit(token?: Token): Token;
    /**
     * Return the next token from the character stream and records this last
     * token in case it resides on the default channel. This recorded token
     * is used to determine when the lexer could possibly match a regex
     * literal.
     *
     */
    nextToken(): Token;
    private createDedent;
    private commonToken;
    private getIndentationCount;
    private atStartOfInput;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void;
    private SINGLE_QUOTE_SHORT_TEMPLATE_STRING_START_action;
    private DOUBLE_QUOTE_SHORT_TEMPLATE_STRING_START_action;
    private SINGLE_QUOTE_LONG_TEMPLATE_STRING_START_action;
    private DOUBLE_QUOTE_LONG_TEMPLATE_STRING_START_action;
    private NEWLINE_action;
    private OPEN_PAREN_action;
    private CLOSE_PAREN_action;
    private OPEN_BRACK_action;
    private CLOSE_BRACK_action;
    private OPEN_BRACE_action;
    private CLOSE_BRACE_action;
    private SINGLE_QUOTE_SHORT_TEMPLATE_STRING_END_action;
    private SINGLE_QUOTE_LONG_TEMPLATE_STRING_END_action;
    private DOUBLE_QUOTE_SHORT_TEMPLATE_STRING_END_action;
    private DOUBLE_QUOTE_LONG_TEMPLATE_STRING_END_action;
    sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean;
    private NEWLINE_sempred;
    private TEMPLATE_CLOSE_BRACE_sempred;
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    private static readonly _serializedATNSegment2;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
//# sourceMappingURL=Python3Lexer.d.ts.map