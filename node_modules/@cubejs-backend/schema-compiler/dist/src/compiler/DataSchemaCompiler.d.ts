export class DataSchemaCompiler {
    constructor(repository: any, options?: {});
    repository: any;
    cubeCompilers: any;
    contextCompilers: any;
    transpilers: any;
    preTranspileCubeCompilers: any;
    cubeNameCompilers: any;
    extensions: any;
    cubeFactory: any;
    filesToCompile: any;
    omitErrors: any;
    allowNodeRequire: any;
    compileContext: any;
    compilerCache: any;
    errorReport: any;
    standalone: any;
    nativeInstance: any;
    yamlCompiler: any;
    pythonContext: any;
    compileObjects(compileServices: any, objects: any, errorsReport: any): any;
    /**
     * @protected
     */
    protected loadPythonContext(files: any, nsFileName: any): Promise<any>;
    /**
     * @protected
     */
    protected doCompile(): Promise<any>;
    errorsReport: ErrorReporter | undefined;
    compile(): Promise<any>;
    compilePromise: Promise<any> | undefined;
    transpileFile(file: any, errorsReport: any): any;
    transpileJsFile(file: any, errorsReport: any): any;
    withQuery(query: any, fn: any): any;
    currentQuery: any;
    contextQuery(): any;
    compileCubeFiles(compilers: any, toCompile: any, errorsReport: any): Promise<any>;
    throwIfAnyErrors(): void;
    compileFile(file: any, errorsReport: any, cubes: any, exports: any, contexts: any, toCompile: any, compiledFiles: any, asyncModules: any): void;
    compileJsFile(file: any, errorsReport: any, cubes: any, contexts: any, exports: any, asyncModules: any, toCompile: any, compiledFiles: any): void;
    cloneCompileContextWithGetterAlias(compileContext: any): any;
    standaloneCompileContextProxy(): {};
    resolveModuleFile(currentFile: any, modulePath: any, toCompile: any, errorsReport: any): any;
    readModuleFile(absPath: any, errorsReport: any): any;
    isWhiteListedPackage(packagePath: any): boolean;
}
import { ErrorReporter } from './ErrorReporter';
//# sourceMappingURL=DataSchemaCompiler.d.ts.map