import { SchemaFileRepository } from '@cubejs-backend/shared';
import { NativeInstance } from '@cubejs-backend/native';
import { DataSchemaCompiler } from './DataSchemaCompiler';
import { CubeEvaluator } from './CubeEvaluator';
import { ContextEvaluator } from './ContextEvaluator';
import { JoinGraph } from './JoinGraph';
import { CubeToMetaTransformer } from './CubeToMetaTransformer';
import { CompilerCache } from './CompilerCache';
export type PrepareCompilerOptions = {
    nativeInstance?: NativeInstance;
    allowNodeRequire?: boolean;
    allowJsDuplicatePropsInSchema?: boolean;
    maxQueryCacheSize?: number;
    maxQueryCacheAge?: number;
    compileContext?: any;
    standalone?: boolean;
    headCommitId?: string;
    adapter?: string;
};
export declare const prepareCompiler: (repo: SchemaFileRepository, options?: PrepareCompilerOptions) => {
    compiler: DataSchemaCompiler;
    metaTransformer: CubeToMetaTransformer;
    cubeEvaluator: CubeEvaluator;
    contextEvaluator: ContextEvaluator;
    joinGraph: JoinGraph;
    compilerCache: CompilerCache;
    headCommitId: string | undefined;
    compilerId: string;
};
export declare const compile: (repo: SchemaFileRepository, options?: PrepareCompilerOptions) => Promise<{
    compiler: DataSchemaCompiler;
    metaTransformer: CubeToMetaTransformer;
    cubeEvaluator: CubeEvaluator;
    contextEvaluator: ContextEvaluator;
    joinGraph: JoinGraph;
    compilerCache: CompilerCache;
    headCommitId: string | undefined;
    compilerId: string;
}>;
//# sourceMappingURL=PrepareCompiler.d.ts.map