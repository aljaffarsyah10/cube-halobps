export class CubeToMetaTransformer {
    /**
     * @param {import('./CubeValidator').CubeValidator} cubeValidator
     * @param {import('./CubeEvaluator').CubeEvaluator} cubeEvaluator
     * @param {import('./ContextEvaluator').ContextEvaluator} contextEvaluator
     * @param {import('./JoinGraph').JoinGraph} joinGraph
     */
    constructor(cubeValidator: import('./CubeValidator').CubeValidator, cubeEvaluator: import('./CubeEvaluator').CubeEvaluator, contextEvaluator: import('./ContextEvaluator').ContextEvaluator, joinGraph: import('./JoinGraph').JoinGraph);
    cubeValidator: import("./CubeValidator").CubeValidator;
    cubeSymbols: import("./CubeEvaluator").CubeEvaluator;
    cubeEvaluator: import("./CubeEvaluator").CubeEvaluator;
    contextEvaluator: import("./ContextEvaluator").ContextEvaluator;
    joinGraph: import("./JoinGraph").JoinGraph;
    cubes: any[];
    compile(cubes: any, errorReporter: any): void;
    /**
     * @deprecated
     * @protected
     */
    protected queries: any[] | undefined;
    /**
     * @protected
     */
    protected transform(cube: any): {
        config: {
            name: any;
            type: string;
            title: any;
            isVisible: any;
            public: any;
            description: any;
            connectedComponent: any;
            meta: any;
            measures: {
                isVisible: any;
                public: any;
                name: string;
                title: string;
                description: any;
                shortTitle: string;
                format: any;
                cumulativeTotal: any;
                cumulative: any;
                type: any;
                aggType: any;
                drillMembers: any;
                drillMembersGrouped: {
                    measures: any;
                    dimensions: any;
                };
                meta: any;
            }[];
            dimensions: {
                name: string;
                title: string;
                type: any;
                description: any;
                shortTitle: string;
                suggestFilterValues: any;
                format: any;
                meta: any;
                isVisible: any;
                public: any;
                primaryKey: boolean;
            }[];
            segments: {
                name: string;
                title: string;
                shortTitle: string;
                description: any;
                meta: any;
                isVisible: any;
                public: any;
            }[];
        };
    };
    queriesForContext(contextId: any): any[] | R.Dictionary<any> | undefined;
    /**
     * @protected
     */
    protected isVisible(symbol: any, defaultValue: any): any;
    measureConfig(cubeName: any, cubeTitle: any, nameToMetric: any): {
        name: string;
        title: string;
        description: any;
        shortTitle: string;
        format: any;
        cumulativeTotal: any;
        cumulative: any;
        type: any;
        aggType: any;
        drillMembers: any;
        drillMembersGrouped: {
            measures: any;
            dimensions: any;
        };
        meta: any;
    };
    title(cubeTitle: any, nameToDef: any, short: any): string;
    titleize(name: any): string;
}
import R from 'ramda';
//# sourceMappingURL=CubeToMetaTransformer.d.ts.map