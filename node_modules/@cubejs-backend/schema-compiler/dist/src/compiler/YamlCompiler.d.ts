import { JinjaEngine, NativeInstance, PythonCtx } from '@cubejs-backend/native';
import type { FileContent } from '@cubejs-backend/shared';
import { CubeSymbols } from './CubeSymbols';
import { DataSchemaCompiler } from './DataSchemaCompiler';
import { CubeDictionary } from './CubeDictionary';
import { ErrorReporter } from './ErrorReporter';
export declare class YamlCompiler {
    private readonly cubeSymbols;
    private readonly cubeDictionary;
    private readonly nativeInstance;
    dataSchemaCompiler: DataSchemaCompiler | null;
    protected jinjaEngine: JinjaEngine | null;
    constructor(cubeSymbols: CubeSymbols, cubeDictionary: CubeDictionary, nativeInstance: NativeInstance);
    protected getJinjaEngine(): JinjaEngine;
    initFromPythonContext(ctx: PythonCtx): void;
    compileYamlWithJinjaFile(file: FileContent, errorsReport: ErrorReporter, cubes: any, contexts: any, exports: any, asyncModules: any, toCompile: any, compiledFiles: any, compileContext: any, pythonContext: any): Promise<void>;
    compileYamlFile(file: FileContent, errorsReport: ErrorReporter, cubes: any, contexts: any, exports: any, asyncModules: any, toCompile: any, compiledFiles: any): void;
    private transpileAndPrepareJsFile;
    private transformYamlCubeObj;
    private transpileYaml;
    private escapeDoubleQuotes;
    private parsePythonIntoArrowFunction;
    private parsePythonAndTranspileToJs;
    private astIntoArrowFunction;
    private yamlArrayToObj;
    private extractProgramBodyIfNeeded;
}
//# sourceMappingURL=YamlCompiler.d.ts.map