import { BaseFilter } from './BaseFilter';
import type { BaseQuery } from './BaseQuery';
export declare class BaseTimeDimension extends BaseFilter {
    readonly dateRange: any;
    readonly granularity: string;
    readonly boundaryDateRange: any;
    constructor(query: BaseQuery, timeDimension: any);
    selectColumns(): string[] | null;
    hasNoRemapping(): boolean;
    aliasName(): string | null;
    unescapedAliasName(granularity: string): string;
    dateSeriesAliasName(): string;
    dateSeriesSelectColumn(dateSeriesAliasName: any): string | null;
    dimensionSql(): any;
    convertTzForRawTimeDimensionIfNeeded(sql: any): any;
    convertedToTz(): string;
    filterToWhere(): any;
    filterParams(): any[];
    protected dateFromFormattedValue: any | null;
    dateFromFormatted(): any;
    protected dateFromValue: any | null;
    dateFrom(): any;
    dateFromParam(): string;
    localDateTimeFromParam(): string;
    localDateTimeFromOrBuildRangeParam(): string;
    protected dateToFormattedValue: any | null;
    dateToFormatted(): any;
    protected dateToValue: any | null;
    dateTo(): any;
    dateToParam(): string;
    localDateTimeToParam(): string;
    localDateTimeToOrBuildRangeParam(): string;
    dateRangeGranularity(): any;
    protected rollupGranularityValue: any | null;
    rollupGranularity(): any;
    timeSeries(): any[][];
    wildcardRange(): string[];
    boundaryDateRangeFormatted(): any;
}
//# sourceMappingURL=BaseTimeDimension.d.ts.map