import type { BaseQuery } from './BaseQuery';
import type { DimensionDefinition, SegmentDefinition } from '../compiler/CubeEvaluator';
export declare class BaseDimension {
    protected readonly query: BaseQuery;
    readonly dimension: any;
    readonly expression: any;
    readonly expressionCubeName: any;
    readonly expressionName: string | undefined;
    readonly isMemberExpression: boolean;
    constructor(query: BaseQuery, dimension: any);
    selectColumns(): string[] | null;
    hasNoRemapping(): boolean;
    cumulativeSelectColumns(): string[];
    dimensionSql(): any;
    convertTzForRawTimeDimensionIfNeeded(sql: any): any;
    sqlDefinition(): Function;
    getMembers(): this[];
    cube(): any;
    dimensionDefinition(): DimensionDefinition | SegmentDefinition;
    definition(): DimensionDefinition | SegmentDefinition;
    aliasName(): string | null;
    unescapedAliasName(): string;
    dateFieldType(): string | undefined;
    path(): any;
    expressionPath(): any;
}
//# sourceMappingURL=BaseDimension.d.ts.map