"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQuery = exports.queryClass = void 0;
const PostgresQuery_1 = require("./PostgresQuery");
const MysqlQuery_1 = require("./MysqlQuery");
const MongoBiQuery_1 = require("./MongoBiQuery");
const MssqlQuery_1 = require("./MssqlQuery");
const BigqueryQuery_1 = require("./BigqueryQuery");
const RedshiftQuery_1 = require("./RedshiftQuery");
const PrestodbQuery_1 = require("./PrestodbQuery");
const VerticaQuery_1 = require("./VerticaQuery");
const SnowflakeQuery_1 = require("./SnowflakeQuery");
const ClickHouseQuery_1 = require("./ClickHouseQuery");
const CrateQuery_1 = require("./CrateQuery");
const HiveQuery_1 = require("./HiveQuery");
const OracleQuery_1 = require("./OracleQuery");
const SqliteQuery_1 = require("./SqliteQuery");
const AWSElasticSearchQuery_1 = require("./AWSElasticSearchQuery");
const ElasticSearchQuery_1 = require("./ElasticSearchQuery");
const CubeStoreQuery_1 = require("./CubeStoreQuery");
const ADAPTERS = {
    postgres: PostgresQuery_1.PostgresQuery,
    redshift: RedshiftQuery_1.RedshiftQuery,
    mysql: MysqlQuery_1.MysqlQuery,
    mysqlauroraserverless: MysqlQuery_1.MysqlQuery,
    mongobi: MongoBiQuery_1.MongoBiQuery,
    mssql: MssqlQuery_1.MssqlQuery,
    bigquery: BigqueryQuery_1.BigqueryQuery,
    prestodb: PrestodbQuery_1.PrestodbQuery,
    qubole_prestodb: PrestodbQuery_1.PrestodbQuery,
    athena: PrestodbQuery_1.PrestodbQuery,
    vertica: VerticaQuery_1.VerticaQuery,
    snowflake: SnowflakeQuery_1.SnowflakeQuery,
    clickhouse: ClickHouseQuery_1.ClickHouseQuery,
    crate: CrateQuery_1.CrateQuery,
    hive: HiveQuery_1.HiveQuery,
    oracle: OracleQuery_1.OracleQuery,
    sqlite: SqliteQuery_1.SqliteQuery,
    awselasticsearch: AWSElasticSearchQuery_1.AWSElasticSearchQuery,
    elasticsearch: ElasticSearchQuery_1.ElasticSearchQuery,
    materialize: PostgresQuery_1.PostgresQuery,
    cubestore: CubeStoreQuery_1.CubeStoreQuery,
};
const queryClass = (dbType, dialectClass) => dialectClass || ADAPTERS[dbType];
exports.queryClass = queryClass;
const createQuery = (compilers, dbType, queryOptions) => {
    if (!queryOptions.dialectClass && !ADAPTERS[dbType]) {
        return null;
    }
    let externalQueryClass = queryOptions.externalDialectClass;
    if (!externalQueryClass && queryOptions.externalDbType) {
        if (!ADAPTERS[queryOptions.externalDbType]) {
            throw new Error(`Dialect for '${queryOptions.externalDbType}' is not found`);
        }
        externalQueryClass = ADAPTERS[queryOptions.externalDbType];
    }
    return new ((0, exports.queryClass)(dbType, queryOptions.dialectClass))(compilers, {
        ...queryOptions,
        externalQueryClass,
    });
};
exports.createQuery = createQuery;
//# sourceMappingURL=QueryBuilder.js.map