import type { BaseQuery } from './BaseQuery';
export declare class BaseMeasure {
    protected readonly query: BaseQuery;
    readonly measure: any;
    readonly expression: any;
    readonly expressionCubeName: any;
    readonly expressionName: any;
    readonly isMemberExpression: boolean;
    constructor(query: BaseQuery, measure: any);
    getMembers(): this[];
    selectColumns(): string[];
    hasNoRemapping(): boolean;
    cumulativeSelectColumns(): string[];
    cumulativeMeasureSql(): any;
    measureSql(): any;
    cube(): any;
    measureDefinition(): import("../compiler/CubeEvaluator").MeasureDefinition;
    definition(): import("../compiler/CubeEvaluator").MeasureDefinition | {
        sql: any;
        type: string;
    };
    aliasName(): string;
    unescapedAliasName(): string;
    isCumulative(): boolean;
    isAdditive(): boolean;
    static isCumulative(definition: any): boolean;
    rollingWindowDefinition(): any;
    dateJoinCondition(): any;
    windowGranularity(): any;
    minGranularity(granularityA: any, granularityB: any): any;
    granularityFromInterval(interval: any): "day" | "month" | "year" | "week" | "hour" | undefined;
    shouldUngroupForCumulative(): any;
    sqlDefinition(): Function;
    path(): any;
    expressionPath(): any;
}
//# sourceMappingURL=BaseMeasure.d.ts.map