"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseSegment = void 0;
class BaseSegment {
    constructor(query, segment) {
        this.query = query;
        this.segment = segment;
        this.isMemberExpression = false;
        if (segment.expression) {
            this.expression = segment.expression;
            this.expressionCubeName = segment.cubeName;
            this.expressionName = segment.expressionName || `${segment.cubeName}.${segment.name}`;
            this.isMemberExpression = !!segment.definition;
        }
    }
    filterToWhere() {
        return this.segmentSql();
    }
    segmentSql() {
        if (this.expression) {
            return this.query.evaluateSymbolSql(this.expressionCubeName, this.expressionName, this.definition(), 'segment');
        }
        return this.query.segmentSql(this);
    }
    filterParams() {
        return [];
    }
    segmentDefinition() {
        return this.query.cubeEvaluator.segmentByPath(this.segment);
    }
    definition() {
        if (this.expression) {
            return {
                sql: this.expression
            };
        }
        return this.segmentDefinition();
    }
    getMembers() {
        return [this];
    }
    cube() {
        if (this.expression) {
            return this.query.cubeEvaluator.cubeFromPath(this.expressionCubeName);
        }
        return this.query.cubeEvaluator.cubeFromPath(this.segment);
    }
    sqlDefinition() {
        return this.segmentDefinition().sql;
    }
    path() {
        if (this.expression) {
            return null;
        }
        return this.query.cubeEvaluator.parsePath('segments', this.segment);
    }
    expressionPath() {
        if (this.expression) {
            return `expr:${this.expression.expressionName}`;
        }
        return this.query.cubeEvaluator.pathFromArray(this.path());
    }
}
exports.BaseSegment = BaseSegment;
//# sourceMappingURL=BaseSegment.js.map