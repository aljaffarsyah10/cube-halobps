"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLServer = void 0;
const native_1 = require("@cubejs-backend/native");
const shared_1 = require("@cubejs-backend/shared");
const crypto = __importStar(require("crypto"));
class SQLServer {
    constructor(apiGateway) {
        this.apiGateway = apiGateway;
        this.sqlInterfaceInstance = null;
        (0, native_1.setupLogger)(({ event }) => apiGateway.log(event), process.env.CUBEJS_LOG_LEVEL === 'trace' ? 'trace' : 'warn');
    }
    async init(options) {
        if (this.sqlInterfaceInstance) {
            throw new Error('Unable to start SQL interface two times');
        }
        const checkSqlAuth = (options.checkSqlAuth && this.wrapCheckSqlAuthFn(options.checkSqlAuth))
            || this.createDefaultCheckSqlAuthFn(options);
        const canSwitchSqlUser = options.canSwitchSqlUser
            || this.createDefaultCanSwitchSqlUserFn(options);
        const contextByRequest = async (request, session) => {
            let userForContext = session.user;
            let { securityContext } = session;
            if (request.meta.changeUser && request.meta.changeUser !== session.user) {
                const canSwitch = session.superuser || await canSwitchSqlUser(session.user, request.meta.changeUser);
                if (canSwitch) {
                    userForContext = request.meta.changeUser;
                    const current = await checkSqlAuth(request, userForContext, null);
                    securityContext = current.securityContext;
                }
                else {
                    throw new Error(`You cannot change security context via __user from ${session.user} to ${request.meta.changeUser}, because it's not allowed.`);
                }
            }
            return this.contextByNativeReq(request, securityContext, request.id);
        };
        const canSwitchUserForSession = async (session, user) => session.superuser || canSwitchSqlUser(session.user, user);
        this.sqlInterfaceInstance = await (0, native_1.registerInterface)({
            port: options.sqlPort,
            pgPort: options.pgSqlPort,
            nonce: options.sqlNonce,
            checkAuth: async ({ request, user, password }) => {
                const { password: returnedPassword, superuser, securityContext, skipPasswordCheck } = await checkSqlAuth(request, user, password);
                // Strip securityContext to improve speed deserialization
                return {
                    password: returnedPassword,
                    superuser: superuser || false,
                    securityContext,
                    skipPasswordCheck,
                };
            },
            meta: async ({ request, session, onlyCompilerId }) => {
                const context = await this.apiGateway.contextByReq(request, session.securityContext, request.id);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.meta({
                            context,
                            res: (message) => {
                                if (onlyCompilerId) {
                                    resolve({ compilerId: message.compilerId });
                                }
                                else {
                                    resolve(message);
                                }
                            },
                            includeCompilerId: true
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            load: async ({ request, session, query }) => {
                const context = await contextByRequest(request, session);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.load({
                            query,
                            queryType: 'multi',
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                            apiType: 'sql',
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            sqlApiLoad: async ({ request, session, query, queryKey, sqlQuery, streaming }) => {
                const context = await contextByRequest(request, session);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.sqlApiLoad({
                            queryKey,
                            query,
                            sqlQuery,
                            streaming,
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                            apiType: 'sql',
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            sql: async ({ request, session, query, memberToAlias, expressionParams }) => {
                const context = await contextByRequest(request, session);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.sql({
                            query,
                            memberToAlias,
                            expressionParams,
                            exportAnnotatedSql: true,
                            memberExpressions: true,
                            disableExternalPreAggregations: true,
                            queryType: 'multi',
                            disableLimitEnforcing: true,
                            context,
                            res: (message) => {
                                resolve(message);
                            },
                            apiType: 'sql',
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            stream: async ({ request, session, query }) => {
                const context = await contextByRequest(request, session);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        resolve(await this.apiGateway.stream(context, query));
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            logLoadEvent: async ({ request, session, event, properties }) => {
                const context = await contextByRequest(request, session);
                this.apiGateway.log({
                    type: event,
                    ...properties
                }, context);
            },
            sqlGenerators: async (paramsJson) => {
                // TODO get rid of it
                const { request, session } = JSON.parse(paramsJson);
                const context = await this.apiGateway.contextByReq(request, session.securityContext, request.id);
                // eslint-disable-next-line no-async-promise-executor
                return new Promise(async (resolve, reject) => {
                    try {
                        await this.apiGateway.sqlGenerators({
                            context,
                            res: (queries) => {
                                resolve(queries);
                            },
                        });
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            },
            canSwitchUserForSession: async ({ session, user }) => canSwitchUserForSession(session, user)
        });
    }
    wrapCheckSqlAuthFn(checkSqlAuth) {
        return async (req, user, password) => {
            const response = await checkSqlAuth(req, user, password);
            if (typeof response !== 'object') {
                throw new Error('checkSqlAuth must return an object');
            }
            return response;
        };
    }
    createDefaultCanSwitchSqlUserFn(options) {
        const superUser = options.sqlSuperUser || (0, shared_1.getEnv)('sqlSuperUser');
        return async (current, _user) => {
            if (superUser) {
                return current === superUser;
            }
            return false;
        };
    }
    createDefaultCheckSqlAuthFn(options) {
        let allowedUser = options.sqlUser || (0, shared_1.getEnv)('sqlUser');
        let allowedPassword = options.sqlPassword || (0, shared_1.getEnv)('sqlPassword');
        if (!(0, shared_1.getEnv)('devMode')) {
            if (!allowedUser) {
                allowedUser = 'cube';
                (0, shared_1.displayCLIWarning)('Option sqlUser is required in production mode. Cube.js will use \'cube\' as a default username.');
            }
            if (!allowedPassword) {
                allowedPassword = crypto.randomBytes(16).toString('hex');
                (0, shared_1.displayCLIWarning)(`Option sqlPassword is required in production mode. Cube.js has generated it as '${allowedPassword}'`);
            }
        }
        return async (req, user) => {
            if (allowedUser && user !== allowedUser) {
                throw new Error(`Incorrect user name "${user}" or password`);
            }
            return {
                password: allowedPassword,
                securityContext: {},
                skipPasswordCheck: (0, shared_1.getEnv)('devMode') && !allowedPassword
            };
        };
    }
    async contextByNativeReq(req, securityContext, requestId) {
        const context = await this.apiGateway.contextByReq(req, securityContext, requestId);
        return {
            ...context,
            ...req.meta,
        };
    }
    async close() {
        // @todo Implement
    }
}
exports.SQLServer = SQLServer;
//# sourceMappingURL=sql-server.js.map