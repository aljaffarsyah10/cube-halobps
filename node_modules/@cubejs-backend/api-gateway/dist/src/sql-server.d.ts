import { SqlInterfaceInstance, Request as NativeRequest, LoadRequestMeta } from '@cubejs-backend/native';
import type { ApiGateway } from './gateway';
import type { CheckSQLAuthFn, ExtendedRequestContext, CanSwitchSQLUserFn } from './interfaces';
export type SQLServerOptions = {
    checkSqlAuth?: CheckSQLAuthFn;
    canSwitchSqlUser?: CanSwitchSQLUserFn;
    sqlPort?: number;
    pgSqlPort?: number;
    sqlNonce?: string;
    sqlUser?: string;
    sqlSuperUser?: string;
    sqlPassword?: string;
};
export declare class SQLServer {
    protected readonly apiGateway: ApiGateway;
    protected sqlInterfaceInstance: SqlInterfaceInstance | null;
    constructor(apiGateway: ApiGateway);
    init(options: SQLServerOptions): Promise<void>;
    protected wrapCheckSqlAuthFn(checkSqlAuth: CheckSQLAuthFn): CheckSQLAuthFn;
    protected createDefaultCanSwitchSqlUserFn(options: SQLServerOptions): CanSwitchSQLUserFn;
    protected createDefaultCheckSqlAuthFn(options: SQLServerOptions): CheckSQLAuthFn;
    protected contextByNativeReq(req: NativeRequest<LoadRequestMeta>, securityContext: any, requestId: string): Promise<ExtendedRequestContext>;
    close(): Promise<void>;
}
//# sourceMappingURL=sql-server.d.ts.map