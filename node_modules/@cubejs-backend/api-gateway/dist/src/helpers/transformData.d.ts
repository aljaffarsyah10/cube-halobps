/**
 * @license Apache-2.0
 * @copyright Cube Dev, Inc.
 * @fileoverview
 * transformData function and related types definition.
 */
import { ConfigItem } from './prepareAnnotation';
import { DBResponsePrimitive, DBResponseValue } from './transformValue';
import { NormalizedQuery, QueryTimeDimension } from '../types/query';
import { ResultType, QueryType } from '../types/strings';
declare const COMPARE_DATE_RANGE_FIELD = "compareDateRange";
declare const COMPARE_DATE_RANGE_SEPARATOR = " - ";
declare const BLENDING_QUERY_KEY_PREFIX = "time.";
declare const BLENDING_QUERY_RES_SEPARATOR = ".";
declare const MEMBER_SEPARATOR = ".";
/**
 * SQL aliases to cube properties hash map.
 */
type AliasToMemberMap = {
    [alias: string]: string;
};
/**
 * Parse date range value from time dimension.
 * @internal
 */
declare function getDateRangeValue(timeDimensions?: QueryTimeDimension[]): string;
/**
 * Parse blending query key from time time dimension.
 * @internal
 */
declare function getBlendingQueryKey(timeDimensions?: QueryTimeDimension[]): string;
/**
 * Parse blending response key from time time dimension.
 * @internal
 */
declare function getBlendingResponseKey(timeDimensions?: QueryTimeDimension[]): string;
/**
 * Parse members names from request/response.
 * @internal
 */
declare function getMembers(queryType: QueryType, query: NormalizedQuery, dbData: {
    [sqlAlias: string]: DBResponseValue;
}[], aliasToMemberNameMap: AliasToMemberMap, annotation: {
    [member: string]: ConfigItem;
}): {
    [member: string]: string;
};
/**
 * Convert DB response object to the compact output format.
 * @internal
 * @todo should we use transformValue for blending query?
 */
declare function getCompactRow(membersToAliasMap: {
    [member: string]: string;
}, annotation: {
    [member: string]: ConfigItem;
}, queryType: QueryType, members: string[], timeDimensions: QueryTimeDimension[] | undefined, dbRow: {
    [sqlAlias: string]: DBResponseValue;
}): DBResponsePrimitive[];
/**
 * Convert DB response object to the vanila output format.
 * @todo rewrite me please!
 * @internal
 */
declare function getVanilaRow(aliasToMemberNameMap: AliasToMemberMap, annotation: {
    [member: string]: ConfigItem;
}, queryType: QueryType, query: NormalizedQuery, dbRow: {
    [sqlAlias: string]: DBResponseValue;
}): {
    [member: string]: DBResponsePrimitive;
};
/**
 * Transforms queried data array to the output format.
 */
declare function transformData(aliasToMemberNameMap: AliasToMemberMap, annotation: {
    [member: string]: ConfigItem;
}, data: {
    [sqlAlias: string]: unknown;
}[], query: NormalizedQuery, queryType: QueryType, resType?: ResultType): {
    members: string[];
    dataset: DBResponsePrimitive[][];
} | {
    [member: string]: DBResponsePrimitive;
}[];
export default transformData;
export { AliasToMemberMap, COMPARE_DATE_RANGE_FIELD, COMPARE_DATE_RANGE_SEPARATOR, BLENDING_QUERY_KEY_PREFIX, BLENDING_QUERY_RES_SEPARATOR, MEMBER_SEPARATOR, getDateRangeValue, getBlendingQueryKey, getBlendingResponseKey, getMembers, getCompactRow, getVanilaRow, transformData, };
//# sourceMappingURL=transformData.d.ts.map