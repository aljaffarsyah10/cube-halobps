"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformPreAggregations = exports.transformJoins = exports.transformSegment = exports.transformDimension = exports.transformMeasure = exports.transformCube = exports.stringifyMemberSql = exports.handleDimensionCaseCondition = exports.getMemberPath = void 0;
function stringifyMemberSql(sql) {
    if (!sql) {
        return undefined;
    }
    const sqlStr = sql.toString();
    return sqlStr.substring(sqlStr.indexOf('=>') + 3);
}
exports.stringifyMemberSql = stringifyMemberSql;
function getMemberPath(name) {
    return {
        cubeName: name?.split('.')[0],
        memberName: name?.split('.')[1],
    };
}
exports.getMemberPath = getMemberPath;
function handleDimensionCaseCondition(caseCondition) {
    if (!caseCondition) {
        return undefined;
    }
    return {
        ...caseCondition,
        when: Object.values(caseCondition?.when)?.map((item) => ({
            ...item,
            sql: stringifyMemberSql(item.sql),
            label: item?.label?.sql ? stringifyMemberSql(item.label.sql) : item?.label,
        })),
    };
}
exports.handleDimensionCaseCondition = handleDimensionCaseCondition;
function transformCube(cube, cubeDefinitions) {
    return {
        ...cube,
        extends: stringifyMemberSql(cubeDefinitions[cube?.name]?.extends),
        sql: stringifyMemberSql(cubeDefinitions[cube?.name]?.sql),
        fileName: cubeDefinitions[cube?.name]?.fileName,
        refreshKey: cubeDefinitions[cube?.name]?.refreshKey,
    };
}
exports.transformCube = transformCube;
function transformMeasure(measure, cubeDefinitions) {
    const { cubeName, memberName } = getMemberPath(measure.name);
    return {
        ...measure,
        sql: stringifyMemberSql(cubeDefinitions[cubeName]?.measures?.[memberName]?.sql),
        filters: cubeDefinitions[cubeName]?.measures?.[memberName]?.filters?.map((filter) => ({
            sql: stringifyMemberSql(filter.sql),
        })),
    };
}
exports.transformMeasure = transformMeasure;
function transformDimension(dimension, cubeDefinitions) {
    const { cubeName, memberName } = getMemberPath(dimension.name);
    return {
        ...dimension,
        sql: stringifyMemberSql(cubeDefinitions[cubeName]?.dimensions?.[memberName]?.sql),
        case: handleDimensionCaseCondition(cubeDefinitions[cubeName]?.dimensions?.[memberName]?.case),
    };
}
exports.transformDimension = transformDimension;
function transformSegment(segment, cubeDefinitions) {
    const { cubeName, memberName } = getMemberPath(segment.name);
    return {
        ...segment,
        sql: stringifyMemberSql(cubeDefinitions[cubeName]?.segments?.[memberName]?.sql),
    };
}
exports.transformSegment = transformSegment;
function transformJoins(joins) {
    if (!joins) {
        return undefined;
    }
    return Object.entries(joins)?.map(([joinName, join]) => ({
        ...join,
        name: joinName,
        sql: stringifyMemberSql(join.sql),
    }));
}
exports.transformJoins = transformJoins;
function transformPreAggregations(preAggregations) {
    if (!preAggregations) {
        return undefined;
    }
    return Object.entries(preAggregations)?.map(([preAggregationName, preAggregation]) => ({
        ...preAggregation,
        name: preAggregationName,
        timeDimensionReference: stringifyMemberSql(preAggregation.timeDimensionReference),
        dimensionReferences: stringifyMemberSql(preAggregation.dimensionReferences),
        measureReferences: stringifyMemberSql(preAggregation.measureReferences),
    }));
}
exports.transformPreAggregations = transformPreAggregations;
//# sourceMappingURL=transformMetaExtended.js.map