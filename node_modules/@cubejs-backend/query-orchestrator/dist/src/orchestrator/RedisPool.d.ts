import { Pool, Options as PoolOptions } from 'generic-pool';
import AsyncRedisClient from './AsyncRedisClient';
export type CreateRedisClientFn = () => Promise<AsyncRedisClient>;
export interface RedisPoolOptions {
    poolMin?: number;
    poolMax?: number;
    idleTimeoutSeconds?: number;
    softIdleTimeoutSeconds?: number;
    poolOptions?: Omit<PoolOptions, 'max' | 'min'>;
    createClient?: CreateRedisClientFn;
    destroyClient?: (client: AsyncRedisClient) => Promise<void>;
}
export declare class RedisPool {
    protected readonly pool: Pool<AsyncRedisClient> | null;
    protected readonly create: CreateRedisClientFn | null;
    protected poolErrors: number;
    constructor(options?: RedisPoolOptions);
    getClient(): Promise<AsyncRedisClient>;
    release(client: AsyncRedisClient): void;
    testConnection(): Promise<void>;
    cleanup(): Promise<void>;
}
//# sourceMappingURL=RedisPool.d.ts.map