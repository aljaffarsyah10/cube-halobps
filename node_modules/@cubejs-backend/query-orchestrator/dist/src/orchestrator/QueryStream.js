"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryStream = void 0;
const stream = __importStar(require("stream"));
const shared_1 = require("@cubejs-backend/shared");
class QueryStream extends stream.Transform {
    /**
     * @constructor
     */
    constructor({ key, streams, aliasNameToMember, }) {
        super({
            objectMode: true,
            highWaterMark: (0, shared_1.getEnv)('dbQueryStreamHighWaterMark'),
        });
        this.timeout = 5 * 60 * 1000;
        this.timer = null;
        this.counter = 0;
        this.queryKey = key;
        this.streams = streams;
        this.aliasNameToMember = aliasNameToMember;
        this.debounce();
    }
    /**
     * @override
     */
    _transform(chunk, encoding, callback) {
        if (this.streams.has(this.queryKey)) {
            this.streams.delete(this.queryKey);
        }
        let row = {};
        if (this.aliasNameToMember) {
            Object.keys(chunk).forEach((alias) => {
                row[this.aliasNameToMember[alias]] = chunk[alias];
            });
        }
        else {
            row = chunk;
        }
        if (this.counter < this.readableHighWaterMark) {
            this.counter++;
        }
        else {
            this.counter = 0;
            this.debounce();
        }
        callback(null, row);
    }
    /**
     * @override
     */
    _destroy(error, callback) {
        clearTimeout(this.timer);
        if (this.streams.has(this.queryKey)) {
            this.streams.delete(this.queryKey);
        }
        callback(error);
    }
    /**
     * Reset destroyer timeout.
     */
    debounce() {
        if (this.timer) {
            clearTimeout(this.timer);
        }
        this.timer = setTimeout(() => {
            this.destroy();
        }, this.timeout);
    }
}
exports.QueryStream = QueryStream;
//# sourceMappingURL=QueryStream.js.map