import { MaybeCancelablePromise } from '@cubejs-backend/shared';
import { CacheDriverInterface } from '@cubejs-backend/base-driver';
import { CubeStoreDriver } from './CubeStoreDriver';
export declare class CubeStoreCacheDriver implements CacheDriverInterface {
    protected connectionFactory: () => Promise<CubeStoreDriver>;
    constructor(connectionFactory: () => Promise<CubeStoreDriver>);
    protected connection: CubeStoreDriver | null;
    protected getConnection(): Promise<CubeStoreDriver>;
    withLock: (key: string, cb: () => MaybeCancelablePromise<any>, expiration?: number, freeAfter?: boolean) => import("@cubejs-backend/shared").CancelablePromise<boolean>;
    get(key: string): Promise<any>;
    set(key: string, value: any, expiration: any): Promise<{
        key: string;
        bytes: number;
    }>;
    remove(key: string): Promise<void>;
    keysStartingWith(prefix: string): Promise<any[]>;
    cleanup(): Promise<void>;
    testConnection(): Promise<void>;
}
//# sourceMappingURL=CubeStoreCacheDriver.d.ts.map