import { BaseDriver, ExternalCreateTableOptions, DriverInterface, IndexesSQL, QueryOptions, ExternalDriverCompatibilities, TableStructure } from '@cubejs-backend/base-driver';
import { ConnectionConfig } from './types';
import { WebSocketConnection } from './WebSocketConnection';
type Column = {
    type: string;
    name: string;
};
type CreateTableOptions = {
    streamOffset?: string;
    inputFormat?: string;
    buildRangeEnd?: string;
    uniqueKey?: string;
    indexes?: string;
    files?: string[];
    aggregations?: string;
    selectStatement?: string;
    sealAt?: string;
    delimiter?: string;
};
export declare class CubeStoreDriver extends BaseDriver implements DriverInterface {
    protected readonly config: any;
    protected readonly connection: WebSocketConnection;
    protected readonly baseUrl: string;
    constructor(config?: Partial<ConnectionConfig>);
    testConnection(): Promise<void>;
    query<R = any>(query: string, values: any[], options?: QueryOptions): Promise<R[]>;
    release(): Promise<void>;
    informationSchemaQuery(): string;
    createTableSqlWithOptions(tableName: any, columns: any, options: CreateTableOptions): string;
    createTableWithOptions(tableName: string, columns: Column[], options: CreateTableOptions, queryTracingObj: any): Promise<any[]>;
    getTablesQuery(schemaName: any): Promise<any[]>;
    getPrefixTablesQuery(schemaName: any, tablePrefixes: any): Promise<any[]>;
    tableColumnTypes(table: string): Promise<TableStructure>;
    quoteIdentifier(identifier: string): string;
    fromGenericType(columnType: string): string;
    toColumnValue(value: any, genericType: any): string | boolean;
    uploadTableWithIndexes(table: string, columns: Column[], tableData: any, indexesSql: IndexesSQL, uniqueKeyColumns: string[] | null, queryTracingObj?: any, externalOptions?: ExternalCreateTableOptions): Promise<void>;
    private createIndexString;
    private importRows;
    private importCsvFile;
    private importStream;
    private importStreamingSource;
    capabilities(): ExternalDriverCompatibilities;
}
export {};
//# sourceMappingURL=CubeStoreDriver.d.ts.map