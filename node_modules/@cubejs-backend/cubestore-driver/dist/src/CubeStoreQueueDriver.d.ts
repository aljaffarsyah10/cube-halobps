import { QueueDriverInterface, QueueDriverConnectionInterface, QueryStageStateResponse, QueryDef, RetrieveForProcessingResponse, QueueDriverOptions, AddToQueueQuery, AddToQueueOptions, AddToQueueResponse, QueryKey, QueryKeyHash, ProcessingId, QueueId, GetActiveAndToProcessResponse, QueryKeysTuple } from '@cubejs-backend/base-driver';
import { CubeStoreDriver } from './CubeStoreDriver';
declare class CubestoreQueueDriverConnection implements QueueDriverConnectionInterface {
    protected readonly driver: CubeStoreDriver;
    protected readonly options: QueueDriverOptions;
    constructor(driver: CubeStoreDriver, options: QueueDriverOptions);
    redisHash(queryKey: QueryKey): QueryKeyHash;
    protected prefixKey(queryKey: QueryKey): string;
    addToQueue(keyScore: number, queryKey: QueryKey, orphanedTime: number, queryHandler: string, query: AddToQueueQuery, priority: number, options: AddToQueueOptions): Promise<AddToQueueResponse>;
    getQueryAndRemove(hash: QueryKeyHash, queueId: QueueId | null): Promise<[QueryDef]>;
    cancelQuery(hash: QueryKeyHash, queueId: QueueId | null): Promise<QueryDef | null>;
    freeProcessingLock(_hash: QueryKeyHash, _processingId: string, _activated: unknown): Promise<void>;
    getActiveQueries(): Promise<QueryKeysTuple[]>;
    getToProcessQueries(): Promise<QueryKeysTuple[]>;
    getActiveAndToProcess(): Promise<GetActiveAndToProcessResponse>;
    getNextProcessingId(): Promise<number | string>;
    getQueryStageState(onlyKeys: boolean): Promise<QueryStageStateResponse>;
    getResult(queryKey: QueryKey): Promise<unknown>;
    getStalledQueries(): Promise<QueryKeysTuple[]>;
    getOrphanedQueries(): Promise<QueryKeysTuple[]>;
    getQueriesToCancel(): Promise<QueryKeysTuple[]>;
    protected decodeQueryDefFromRow(row: {
        payload: string;
        extra?: string | null;
    }, method: string): QueryDef;
    getQueryDef(hash: QueryKeyHash, queueId: QueueId | null): Promise<QueryDef | null>;
    optimisticQueryUpdate(hash: QueryKeyHash, toUpdate: unknown, _processingId: ProcessingId, queueId: QueueId): Promise<boolean>;
    release(): void;
    retrieveForProcessing(hash: QueryKeyHash, _processingId: string): Promise<RetrieveForProcessingResponse>;
    getResultBlocking(hash: QueryKeyHash, queueId: QueueId): Promise<QueryDef | null>;
    setResultAndRemoveQuery(hash: QueryKeyHash, executionResult: unknown, _processingId: ProcessingId, queueId: QueueId): Promise<boolean>;
    updateHeartBeat(hash: QueryKeyHash, queueId: QueueId | null): Promise<void>;
}
export declare class CubeStoreQueueDriver implements QueueDriverInterface {
    protected readonly driverFactory: () => Promise<CubeStoreDriver>;
    protected readonly options: QueueDriverOptions;
    constructor(driverFactory: () => Promise<CubeStoreDriver>, options: QueueDriverOptions);
    protected connection: CubeStoreDriver | null;
    redisHash(queryKey: QueryKey): QueryKeyHash;
    protected getConnection(): Promise<CubeStoreDriver>;
    createConnection(): Promise<CubestoreQueueDriverConnection>;
    release(): void;
}
export {};
//# sourceMappingURL=CubeStoreQueueDriver.d.ts.map