import * as flatbuffers from 'flatbuffers';
export declare class HttpTable {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): HttpTable;
    static getRootAsHttpTable(bb: flatbuffers.ByteBuffer, obj?: HttpTable): HttpTable;
    static getSizePrefixedRootAsHttpTable(bb: flatbuffers.ByteBuffer, obj?: HttpTable): HttpTable;
    name(): string | null;
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    columns(index: number): string;
    columns(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    columnsLength(): number;
    types(index: number): string;
    types(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    typesLength(): number;
    csvRows(): string | null;
    csvRows(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    static startHttpTable(builder: flatbuffers.Builder): void;
    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset): void;
    static addColumns(builder: flatbuffers.Builder, columnsOffset: flatbuffers.Offset): void;
    static createColumnsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startColumnsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addTypes(builder: flatbuffers.Builder, typesOffset: flatbuffers.Offset): void;
    static createTypesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startTypesVector(builder: flatbuffers.Builder, numElems: number): void;
    static addCsvRows(builder: flatbuffers.Builder, csvRowsOffset: flatbuffers.Offset): void;
    static endHttpTable(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createHttpTable(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, columnsOffset: flatbuffers.Offset, typesOffset: flatbuffers.Offset, csvRowsOffset: flatbuffers.Offset): flatbuffers.Offset;
}
//# sourceMappingURL=http-table.d.ts.map