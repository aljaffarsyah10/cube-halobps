"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpColumnValue = void 0;
const flatbuffers = __importStar(require("flatbuffers"));
class HttpColumnValue {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsHttpColumnValue(bb, obj) {
        return (obj || new HttpColumnValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsHttpColumnValue(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HttpColumnValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    stringValue(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startHttpColumnValue(builder) {
        builder.startObject(1);
    }
    static addStringValue(builder, stringValueOffset) {
        builder.addFieldOffset(0, stringValueOffset, 0);
    }
    static endHttpColumnValue(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createHttpColumnValue(builder, stringValueOffset) {
        HttpColumnValue.startHttpColumnValue(builder);
        HttpColumnValue.addStringValue(builder, stringValueOffset);
        return HttpColumnValue.endHttpColumnValue(builder);
    }
}
exports.HttpColumnValue = HttpColumnValue;
//# sourceMappingURL=http-column-value.js.map