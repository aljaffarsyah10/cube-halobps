import * as flatbuffers from 'flatbuffers';
import { HttpRow } from './http-row.js';
export declare class HttpResultSet {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): HttpResultSet;
    static getRootAsHttpResultSet(bb: flatbuffers.ByteBuffer, obj?: HttpResultSet): HttpResultSet;
    static getSizePrefixedRootAsHttpResultSet(bb: flatbuffers.ByteBuffer, obj?: HttpResultSet): HttpResultSet;
    columns(index: number): string;
    columns(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    columnsLength(): number;
    rows(index: number, obj?: HttpRow): HttpRow | null;
    rowsLength(): number;
    static startHttpResultSet(builder: flatbuffers.Builder): void;
    static addColumns(builder: flatbuffers.Builder, columnsOffset: flatbuffers.Offset): void;
    static createColumnsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startColumnsVector(builder: flatbuffers.Builder, numElems: number): void;
    static addRows(builder: flatbuffers.Builder, rowsOffset: flatbuffers.Offset): void;
    static createRowsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startRowsVector(builder: flatbuffers.Builder, numElems: number): void;
    static endHttpResultSet(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createHttpResultSet(builder: flatbuffers.Builder, columnsOffset: flatbuffers.Offset, rowsOffset: flatbuffers.Offset): flatbuffers.Offset;
}
//# sourceMappingURL=http-result-set.d.ts.map