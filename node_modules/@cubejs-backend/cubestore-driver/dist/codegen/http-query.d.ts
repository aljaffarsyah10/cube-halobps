import * as flatbuffers from 'flatbuffers';
import { HttpTable } from './http-table.js';
export declare class HttpQuery {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): HttpQuery;
    static getRootAsHttpQuery(bb: flatbuffers.ByteBuffer, obj?: HttpQuery): HttpQuery;
    static getSizePrefixedRootAsHttpQuery(bb: flatbuffers.ByteBuffer, obj?: HttpQuery): HttpQuery;
    query(): string | null;
    query(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    traceObj(): string | null;
    traceObj(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    inlineTables(index: number, obj?: HttpTable): HttpTable | null;
    inlineTablesLength(): number;
    static startHttpQuery(builder: flatbuffers.Builder): void;
    static addQuery(builder: flatbuffers.Builder, queryOffset: flatbuffers.Offset): void;
    static addTraceObj(builder: flatbuffers.Builder, traceObjOffset: flatbuffers.Offset): void;
    static addInlineTables(builder: flatbuffers.Builder, inlineTablesOffset: flatbuffers.Offset): void;
    static createInlineTablesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static startInlineTablesVector(builder: flatbuffers.Builder, numElems: number): void;
    static endHttpQuery(builder: flatbuffers.Builder): flatbuffers.Offset;
    static createHttpQuery(builder: flatbuffers.Builder, queryOffset: flatbuffers.Offset, traceObjOffset: flatbuffers.Offset, inlineTablesOffset: flatbuffers.Offset): flatbuffers.Offset;
}
//# sourceMappingURL=http-query.d.ts.map