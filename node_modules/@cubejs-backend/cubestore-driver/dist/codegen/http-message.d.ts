import * as flatbuffers from 'flatbuffers';
import { HttpCommand } from './http-command.js';
export declare class HttpMessage {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): HttpMessage;
    static getRootAsHttpMessage(bb: flatbuffers.ByteBuffer, obj?: HttpMessage): HttpMessage;
    static getSizePrefixedRootAsHttpMessage(bb: flatbuffers.ByteBuffer, obj?: HttpMessage): HttpMessage;
    messageId(): number;
    commandType(): HttpCommand;
    command<T extends flatbuffers.Table>(obj: any): any | null;
    connectionId(): string | null;
    connectionId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    static startHttpMessage(builder: flatbuffers.Builder): void;
    static addMessageId(builder: flatbuffers.Builder, messageId: number): void;
    static addCommandType(builder: flatbuffers.Builder, commandType: HttpCommand): void;
    static addCommand(builder: flatbuffers.Builder, commandOffset: flatbuffers.Offset): void;
    static addConnectionId(builder: flatbuffers.Builder, connectionIdOffset: flatbuffers.Offset): void;
    static endHttpMessage(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishHttpMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedHttpMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createHttpMessage(builder: flatbuffers.Builder, messageId: number, commandType: HttpCommand, commandOffset: flatbuffers.Offset, connectionIdOffset: flatbuffers.Offset): flatbuffers.Offset;
}
//# sourceMappingURL=http-message.d.ts.map