"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadBinaryFromRelease = exports.getBinaryPath = exports.getCubeStorePath = void 0;
/* eslint-disable no-restricted-syntax */
const shared_1 = require("@cubejs-backend/shared");
const process_1 = __importDefault(require("process"));
const core_1 = require("@octokit/core");
const path = __importStar(require("path"));
const utils_1 = require("./utils");
function getCubeStorePath() {
    return path.join(path.resolve(__dirname, '..', '..'), 'downloaded', 'latest');
}
exports.getCubeStorePath = getCubeStorePath;
function getBinaryPath() {
    const binaryName = process_1.default.platform === 'win32' ? 'cubestored.exe' : 'cubestored';
    return path.join(getCubeStorePath(), 'bin', binaryName);
}
exports.getBinaryPath = getBinaryPath;
async function fetchRelease(version) {
    const client = new core_1.Octokit({
        auth: process_1.default.env.CUBEJS_GH_API_TOKEN,
        request: {
            agent: await (0, shared_1.getHttpAgentForProxySettings)(),
        }
    });
    const { data } = await client.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', {
        owner: 'cube-js',
        repo: 'cube.js',
        tag: `v${version}`
    });
    return data;
}
async function downloadBinaryFromRelease() {
    // eslint-disable-next-line global-require
    const { version } = require('../../package.json');
    const cubestorePath = getCubeStorePath();
    const currentTarget = (0, utils_1.getTarget)();
    const url = `https://github.com/cube-js/cube.js/releases/download/v${version}/cubestored-${currentTarget}.tar.gz`;
    try {
        await (0, shared_1.downloadAndExtractFile)(url, {
            cwd: cubestorePath,
            showProgress: true,
        });
    }
    catch (e) {
        if (e.toString().includes('Not Found')) {
            const release = await fetchRelease(version);
            if (release) {
                if (release.assets.length === 0) {
                    throw new Error(`There are no artifacts for Cube Store v${version}. Most probably it is still building. Please try again later.`);
                }
                throw new Error(`Cube Store v${version} Artifact for ${currentTarget} doesn't exist. Most probably it is still building. Please try again later.`);
            }
            else {
                throw new Error(`Unable to find Cube Store release v${version}. Most probably it was removed.`);
            }
        }
        else {
            throw e;
        }
    }
}
exports.downloadBinaryFromRelease = downloadBinaryFromRelease;
//# sourceMappingURL=download.js.map