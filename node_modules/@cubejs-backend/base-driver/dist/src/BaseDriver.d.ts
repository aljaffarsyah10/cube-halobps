/**
 * @copyright Cube Dev, Inc.
 * @license Apache-2.0
 * @fileoverview The `BaseDriver` and related types declaration.
 */
/// <reference types="node" />
/// <reference types="node" />
import * as stream from 'stream';
import type { ConnectionOptions as TLSConnectionOptions } from 'tls';
import { ExternalCreateTableOptions, DownloadQueryResultsOptions, DownloadQueryResultsResult, DownloadTableCSVData, DownloadTableData, DownloadTableMemoryData, DriverInterface, ExternalDriverCompatibilities, IndexesSQL, QueryOptions, TableColumn, TableQueryResult, TableStructure, DriverCapabilities, QuerySchemasResult, QueryTablesResult, QueryColumnsResult } from './driver.interface';
/**
 * Base driver class.
 */
export declare abstract class BaseDriver implements DriverInterface {
    private testConnectionTimeoutValue;
    protected logger: any;
    /**
     * Class constructor.
     */
    constructor(_options?: {
        /**
         * Time to wait for a response from a connection after validation
         * request before determining it as not valid. Default - 10000 ms.
         */
        testConnectionTimeout?: number;
    });
    protected informationSchemaQuery(): string;
    protected getSchemasQuery(): string;
    protected getTablesForSpecificSchemasQuery(schemasPlaceholders: string): string;
    protected getColumnsForSpecificTablesQuery(conditionString: string): string;
    protected getColumnNameForSchemaName(): string;
    protected getColumnNameForTableName(): string;
    protected getSslOptions(dataSource: string): TLSConnectionOptions | undefined;
    abstract testConnection(): Promise<void>;
    abstract query<R = unknown>(_query: string, _values?: unknown[], _options?: QueryOptions): Promise<R[]>;
    streamQuery(sql: string, values: string[]): Promise<stream.Readable>;
    downloadQueryResults(query: string, values: unknown[], _options: DownloadQueryResultsOptions): Promise<DownloadQueryResultsResult>;
    readOnly(): boolean;
    protected informationColumnsSchemaReducer(result: any, i: any): any;
    tablesSchema(): Promise<any>;
    createSchemaIfNotExists(schemaName: string): Promise<void>;
    getSchemas(): Promise<QuerySchemasResult[]>;
    getTablesForSpecificSchemas(schemas: QuerySchemasResult[]): Promise<QueryTablesResult[]>;
    getColumnsForSpecificTables(tables: QueryTablesResult[]): Promise<QueryColumnsResult[]>;
    getTablesQuery(schemaName: string): Promise<TableQueryResult[]>;
    loadPreAggregationIntoTable(_preAggregationTableName: string, loadSql: string, params: any, options: any): Promise<unknown[]>;
    dropTable(tableName: string, options?: QueryOptions): Promise<unknown>;
    param(_paramIndex: number): string;
    testConnectionTimeout(): number;
    downloadTable(table: string, _options: ExternalDriverCompatibilities): Promise<DownloadTableMemoryData | DownloadTableCSVData>;
    uploadTable(table: string, columns: TableStructure, tableData: DownloadTableData): Promise<void>;
    uploadTableWithIndexes(table: string, columns: TableStructure, tableData: DownloadTableData, indexesSql: IndexesSQL, _uniqueKeyColumns: string[] | null, _queryTracingObj: any, _externalOptions: ExternalCreateTableOptions): Promise<void>;
    protected toColumnValue(value: string, _genericType: string): string | boolean;
    tableColumnTypes(table: string): Promise<TableStructure>;
    queryColumnTypes(sql: string, params?: unknown[]): Promise<{
        name: any;
        type: string;
    }[]>;
    createTable(quotedTableName: string, columns: TableColumn[]): Promise<unknown[]>;
    protected createTableSql(quotedTableName: string, columns: TableColumn[]): string;
    protected toGenericType(columnType: string): string;
    protected fromGenericType(columnType: string): string;
    protected quoteIdentifier(identifier: string): string;
    protected cancelCombinator(fn: any): any;
    setLogger(logger: any): void;
    protected reportQueryUsage(usage: any, queryOptions: any): void;
    protected databasePoolError(error: any): void;
    release(): Promise<void>;
    capabilities(): DriverCapabilities;
    nowTimestamp(): number;
    wrapQueryWithLimit(query: {
        query: string;
        limit: number;
    }): void;
}
//# sourceMappingURL=BaseDriver.d.ts.map