#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const shared_1 = require("@cubejs-backend/shared");
const process = __importStar(require("process"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const packageContent = fs.readFileSync(path.join(process.cwd(), "package.json"), "utf8");
const pkg = JSON.parse(packageContent);
function resolveConstraint(name, constraintDetails) {
    if (name === "platform") {
        return constraintDetails.includes(process.platform);
    }
    if (name === "arch") {
        return constraintDetails.includes(process.arch);
    }
    if (name === "platform-arch") {
        return constraintDetails.includes(`${process.platform}-${process.arch}`);
    }
    (0, shared_1.displayCLIWarning)(`Unknown constraint name: ${name}, pass: false`);
    return false;
}
function resolveVariableValue(value) {
    if (Array.isArray(value) && value.length == 2) {
        const [valueName, supportedVersions] = value;
        if (valueName === "libpython") {
            for (const version of supportedVersions) {
                if ((0, shared_1.libraryExists)(`libpython${version}`) === shared_1.LibraryExistsResult.Exists) {
                    return version;
                }
            }
            return false;
        }
    }
    if (value === "libc") {
        return resolveLibc();
    }
    (0, shared_1.displayCLIWarning)(`Unable to resolve value, unknown value ${value}`);
    return false;
}
function resolveConstraints(section) {
    let constraintPass = true;
    if (section.constraints) {
        for (const [constraintName, constraintDetails] of Object.entries(section.constraints)) {
            if (!resolveConstraint(constraintName, constraintDetails)) {
                constraintPass = false;
                break;
            }
        }
    }
    return constraintPass;
}
function resolveVars(variables) {
    const res = [];
    for (const [variableName, variable] of Object.entries(variables)) {
        let value = variable["default"];
        let constraintPass = resolveConstraints(variable);
        if (constraintPass) {
            if (variable.value) {
                const resolvedValue = resolveVariableValue(variable.value);
                if (resolvedValue) {
                    value = resolvedValue;
                }
            }
        }
        res.push({
            resolve(url) {
                url = url.replace("${" + variableName + "}", value);
                return url;
            },
        });
    }
    return res;
}
function resolveLibc() {
    if (process.platform === "linux") {
        return (0, shared_1.detectLibc)() === "gnu" ? "glibc" : "musl";
    }
    return "unknown";
}
function resolvePath(path, variables) {
    path = path.replace("${version}", pkg.version);
    path = path.replace("${platform}", process.platform);
    path = path.replace("${arch}", process.arch);
    path = path.replace("${libc}", resolveLibc());
    for (const variable of variables) {
        path = variable.resolve(path);
    }
    return path;
}
(async () => {
    try {
        if (!pkg.resources) {
            throw new Error("Please defined resources section in package.json file in corresponding package");
        }
        const variables = resolveVars(pkg.resources.vars || []);
        for (const file of pkg.resources.files) {
            const url = resolvePath(file.host + file.path, variables);
            let constraintPass = resolveConstraints(file);
            if (constraintPass) {
                console.log(`Downloading: ${url}`);
                await (0, shared_1.downloadAndExtractFile)(url, {
                    cwd: process.cwd(),
                    showProgress: true,
                });
            }
            else {
                console.log(`Skiping downloading for ${file.path}: constraints failed`);
            }
        }
    }
    catch (e) {
        await (0, shared_1.displayCLIError)(e, "Native Installer");
        process.exit(1);
    }
})();
//# sourceMappingURL=index.js.map