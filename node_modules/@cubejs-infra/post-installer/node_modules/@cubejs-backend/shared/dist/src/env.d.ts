export declare class InvalidConfiguration extends Error {
    constructor(key: string, value: any, description: string);
}
export declare function convertTimeStrToMs(input: string, envName: string, description?: string): number;
export declare function asPortNumber(input: number, envName: string): number;
/**
 * Returns the specified data source if assertions are passed, throws
 * an error otherwise.
 * @param dataSource The data source to assert.
 */
export declare function assertDataSource(dataSource?: string): string;
/**
 * Returns data source specific environment variable name.
 * @param origin Origin environment variable name.
 * @param dataSource Data source name.
 */
export declare function keyByDataSource(origin: string, dataSource?: string): string;
declare const variables: Record<string, (...args: any) => any>;
type Vars = typeof variables;
export declare function getEnv<T extends keyof Vars>(key: T, opts?: Parameters<Vars[T]>): ReturnType<Vars[T]>;
export declare function isDockerImage(): boolean;
export {};
//# sourceMappingURL=env.d.ts.map