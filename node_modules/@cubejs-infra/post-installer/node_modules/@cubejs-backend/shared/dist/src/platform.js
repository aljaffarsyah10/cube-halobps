"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.libraryExists = exports.LibraryExistsResult = exports.isNativeSupported = exports.detectLibc = void 0;
const child_process_1 = require("child_process");
const process_1 = __importDefault(require("process"));
const errors_1 = require("./errors");
const cli_1 = require("./cli");
function detectLibc() {
    if (process_1.default.platform !== 'linux') {
        throw new Error('Unable to detect libc on not linux os');
    }
    try {
        const { status } = (0, child_process_1.spawnSync)('getconf', ['GNU_LIBC_VERSION'], {
            encoding: 'utf8',
            // Using pipe to protect unexpect STDERR output
            stdio: 'pipe'
        });
        if (status === 0) {
            return 'gnu';
        }
    }
    catch (e) {
        (0, errors_1.internalExceptions)(e);
    }
    {
        const { status, stdout, stderr } = (0, child_process_1.spawnSync)('ldd', ['--version'], {
            encoding: 'utf8',
            // Using pipe to protect unexpect STDERR output
            stdio: 'pipe',
        });
        if (status === 0) {
            if (stdout.includes('musl')) {
                return 'musl';
            }
            if (stdout.includes('gnu')) {
                return 'gnu';
            }
        }
        else {
            if (stderr.includes('musl')) {
                return 'musl';
            }
            if (stderr.includes('gnu')) {
                return 'gnu';
            }
        }
    }
    (0, cli_1.displayCLIWarning)('Unable to detect what host library is used as libc, continue with gnu');
    return 'gnu';
}
exports.detectLibc = detectLibc;
function isNativeSupported() {
    if (process_1.default.platform === 'linux') {
        if (detectLibc() === 'musl') {
            (0, cli_1.displayCLIWarningOnce)('is-native-supported', 'Unable to load native on your system. You are using linux distro with Musl which is not supported.');
            return {
                reason: 'You are using linux distro with Musl which is not supported'
            };
        }
    }
    return true;
}
exports.isNativeSupported = isNativeSupported;
var LibraryExistsResult;
(function (LibraryExistsResult) {
    // We are sure that required library doesnt exist on system
    LibraryExistsResult[LibraryExistsResult["None"] = 0] = "None";
    // We are sure that required library exists
    LibraryExistsResult[LibraryExistsResult["Exists"] = 1] = "Exists";
    LibraryExistsResult[LibraryExistsResult["UnableToCheck"] = 2] = "UnableToCheck";
})(LibraryExistsResult = exports.LibraryExistsResult || (exports.LibraryExistsResult = {}));
function libraryExists(libraryName) {
    if (process_1.default.platform === 'linux') {
        try {
            const { status, output } = (0, child_process_1.spawnSync)('ldconfig', ['-v'], {
                encoding: 'utf8',
                // Using pipe to protect unexpect STDERR output
                stdio: 'pipe'
            });
            if (status === 0) {
                if (output.join(' ').includes(libraryName)) {
                    return LibraryExistsResult.Exists;
                }
                return LibraryExistsResult.None;
            }
            else {
                return LibraryExistsResult.UnableToCheck;
            }
        }
        catch (e) {
            (0, errors_1.internalExceptions)(e);
        }
    }
    return LibraryExistsResult.UnableToCheck;
}
exports.libraryExists = libraryExists;
//# sourceMappingURL=platform.js.map